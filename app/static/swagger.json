{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Flask API",
    "description": "API documentation for user registration, authentication, email sending, and paper submission"
  },
  "basePath": "/",
  "schemes": ["https"],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Enter 'Bearer' followed by a space and the JWT token."
    }
  },
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Creates a new user in the system",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "first_name": { "type": "string" },
                "last_name": { "type": "string" },
                "phone_number": { "type": "string" },
                "role": { "type": "string" }
              },
              "required": ["email", "first_name", "last_name", "phone_number", "role"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration successful"
          },
          "400": {
            "description": "Invalid input or email already exists"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Login a user and return access/refresh tokens",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Login credentials",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": { "type": "string" },
                "password": { "type": "string" }
              },
              "required": ["username", "password"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "type": "object",
              "properties": {
                "access_token": { "type": "string" },
                "refresh_token": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "Invalid username or password"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh access token",
        "description": "Get a new access token using a refresh token",
        "responses": {
          "200": {
            "description": "Access token refreshed"
          },
          "401": {
            "description": "Unauthorized, invalid refresh token"
          }
        }
      }
    },
    "/auth/logout": {
      "delete": {
        "summary": "Logout a user",
        "description": "Logs out the user and adds the JWT to the blacklist",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful"
          }
        }
      }
    },
    "/auth/user-details": {
      "get": {
        "summary": "Get user's details",
        "description": "Gets the details of a user connected to the access token",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "first_name": { "type": "string" },
                "last_name": { "type": "string" },
                "phone_number": { "type": "string" }
              }
            }
          },
          "404": {
            "description": "User doesn't exist"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "summary": "Forgot Password",
        "description": "Generates an OTP for resetting the password and sends it to the user's email",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User's email address",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" }
              },
              "required": ["email"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP sent to email"
          },
          "404": {
            "description": "User with this email does not exist"
          }
        }
      }
    },
    "/auth/verify-otp": {
      "post": {
        "summary": "Verify OTP",
        "description": "Verifies the OTP for password reset",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User's email and OTP",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "otp": { "type": "string" }
              },
              "required": ["email", "otp"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP verified successfully"
          },
          "400": {
            "description": "Invalid or expired OTP"
          },
          "404": {
            "description": "User doesn't exist"
          }
        }
      }
    },
    "/auth/change-password": {
      "post": {
        "summary": "Change Password",
        "description": "Changes the user's password after OTP verification",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "New password data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "new_password": { "type": "string" },
                "confirm_password": { "type": "string" }
              },
              "required": ["email", "new_password", "confirm_password"]
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "description": "Password changed successfully"
          },
          "400": {
            "description": "Passwords do not match"
          },
          "403": {
            "description": "Unauthorized for this operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/author/get-papers": {
      "get": {
        "summary": "Retrieve all papers submitted by the current user",
        "description": "This endpoint retrieves all papers submitted by the currently authenticated user based on their JWT token.",
        "tags": [
          "Papers"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of papers submitted by the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "The paper's ID."
                      },
                      "title": {
                        "type": "string",
                        "description": "The paper's title."
                      },
                      "abstract": {
                        "type": "string",
                        "description": "The paper's abstract."
                      },
                      "file_url": {
                        "type": "string",
                        "description": "URL to access the paper file."
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, JWT required."
          },
          "404": {
            "description": "No papers found for the user."
          }
        }
      }
    },
    "/author/files": {
      "post": {
        "summary": "Download a file submitted by the user",
        "description": "This endpoint allows the currently authenticated user to download one of their submitted files, based on the file URL.",
        "tags": [
          "Papers"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "requestBody": {
          "description": "File URL to download.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file_url": {
                    "type": "string",
                    "description": "The URL of the file to be downloaded."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested file is sent for download.",
            "content": {
              "application/octet-stream": {}
            }
          },
          "401": {
            "description": "Unauthorized, JWT required."
          },
          "404": {
            "description": "File not found or the user does not have access."
          }
        }
      }
    }
  }
}

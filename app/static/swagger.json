{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Flask API",
    "description": "API documentation for user registration, authentication, email sending, and paper submission"
  },
  "basePath": "/",
  "schemes": ["http"],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Enter 'Bearer' followed by a space and the JWT token."
    }
  },
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Creates a new user in the system",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "first_name": { "type": "string" },
                "last_name": { "type": "string" },
                "phone_number": { "type": "string" },
                "role": { "type": "string" }
              },
              "required": ["email", "first_name", "last_name", "phone_number", "role"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration successful"
          },
          "400": {
            "description": "Invalid input or email already exists"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Login a user and return access/refresh tokens",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Login credentials",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": { "type": "string" },
                "password": { "type": "string" }
              },
              "required": ["username", "password"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "type": "object",
              "properties": {
                "access_token": { "type": "string" },
                "refresh_token": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "Invalid username or password"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh access token",
        "description": "Get a new access token using a refresh token",
        "responses": {
          "200": {
            "description": "Access token refreshed"
          },
          "401": {
            "description": "Unauthorized, invalid refresh token"
          }
        }
      }
    },
    "/auth/logout": {
      "delete": {
        "summary": "Logout a user",
        "description": "Logs out the user and adds the JWT to the blacklist",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful"
          }
        }
      }
    },
    "/auth/user-details": {
      "get": {
        "summary": "Get user's details",
        "description": "Gets the details of a user connected to the access token",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "first_name": { "type": "string" },
                "last_name": { "type": "string" },
                "phone_number": { "type": "string" }
              }
            }
          },
          "404": {
            "description": "User doesn't exist"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "summary": "Forgot Password",
        "description": "Generates an OTP for resetting the password and sends it to the user's email",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User's email address",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" }
              },
              "required": ["email"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP sent to email"
          },
          "404": {
            "description": "User with this email does not exist"
          }
        }
      }
    },
    "/auth/verify-otp": {
      "post": {
        "summary": "Verify OTP",
        "description": "Verifies the OTP for password reset",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User's email and OTP",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "otp": { "type": "string" }
              },
              "required": ["email", "otp"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP verified successfully"
          },
          "400": {
            "description": "Invalid or expired OTP"
          },
          "404": {
            "description": "User doesn't exist"
          }
        }
      }
    },
    "/auth/change-password": {
      "post": {
        "summary": "Change Password",
        "description": "Changes the user's password after OTP verification",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "New password data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "new_password": { "type": "string" },
                "confirm_password": { "type": "string" }
              },
              "required": ["email", "new_password", "confirm_password"]
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "description": "Password changed successfully"
          },
          "400": {
            "description": "Passwords do not match"
          },
          "403": {
            "description": "Unauthorized for this operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  }
}
